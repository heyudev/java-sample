package com.heyudev.base;

import com.alibaba.fastjson.JSON;
import com.google.common.base.Stopwatch;
import com.google.common.hash.Hashing;

import java.util.*;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicLong;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class TestMain {

    static ExecutorService executorService = Executors.newFixedThreadPool(100);
    public static void main(String[] args) throws InterruptedException {
//        System.out.println("Hello world!");
//        Stopwatch stopwatch = Stopwatch.createStarted();
//        TimeUnit.MILLISECONDS.sleep(1000);
//        System.out.println(stopwatch.stop().elapsed(TimeUnit.MILLISECONDS));
//        stopwatch.reset().start();
//        TimeUnit.MILLISECONDS.sleep(2000);
//        System.out.println(stopwatch.stop().elapsed(TimeUnit.MILLISECONDS));


//        List<String> list = Stream.of("1","2","3").collect(Collectors.toList());
//        System.out.println(list);
//        List<String> list1 = new ArrayList<>(list);
//        System.out.println(list1);
//        list1.remove("1");
//        System.out.println(list1);
//        System.out.println(list);

//        Stopwatch stopwatch = Stopwatch.createStarted();
//        System.out.println(stopwatch.isRunning());
//        TimeUnit.MILLISECONDS.sleep(1000);
//        System.out.println(stopwatch.stop().elapsed(TimeUnit.MILLISECONDS));
//        System.out.println(stopwatch.isRunning());
//        TimeUnit.MILLISECONDS.sleep(1000);
//        System.out.println(stopwatch.reset().elapsed(TimeUnit.MILLISECONDS));
//        System.out.println(stopwatch.isRunning());
//        TimeUnit.MILLISECONDS.sleep(1000);
//        System.out.println(stopwatch.start().elapsed(TimeUnit.MILLISECONDS));
//        System.out.println(stopwatch.isRunning());
//        TimeUnit.MILLISECONDS.sleep(1000);
//        System.out.println(stopwatch.stop().reset().elapsed(TimeUnit.MILLISECONDS));
//        System.out.println(stopwatch.isRunning());


//        Stopwatch stopwatch = Stopwatch.createStarted();
//        List<VideoView> list = new ArrayList<>();
//        for (int i=0;i<100001;i++) {
//            VideoView videoView = new VideoView(i);
//            list.add(videoView);
//        }
//        System.out.println(stopwatch.elapsed(TimeUnit.MILLISECONDS));
//
//        System.out.println(list.get(0).id);
//        System.out.println(list.get(list.size()-1).id);
//        if (list.size()>10000) {
//            list = list.subList(list.size()-10000, list.size());
//            System.out.println("sub");
//        }
//        System.out.println(list.get(0).id);
//        System.out.println(list.get(list.size()-1).id);
//
//        System.out.println(stopwatch.stop().elapsed(TimeUnit.MILLISECONDS));
//        String s = "[1321837,1474879,5560807,6457928,5362992,2261444,2294072,1487956,901982,5402139,1253281,3364608,5737646,2424365,6799382,3087312,2297367,4876517,91825,4744575,1776031,6094645,3493294,7268991,5724273,6754782,9104148,6181983,7345076,7231525,1392761,4910588,1727650,3864372,2129516,6745431,5572522,1872856,1543939,5363177,8674393,489477,7584463,2993309,1720185,2713841,6482887,5826052,37,7360096,6380619,1602053,7307571,6297366,9260122,162171,2754823,6339504,45,8860093,6961276,467205,6744184,5556824,5576048,6425890,113055,1441162,5598804,5771851,6895108,5446044,6618070,8989166,947868,736205,7357221,6744560,8555145,9333466,5540464,5130172,1627986,9602168,5195102,9775301,8937718,18885,6088014,8818800,7945721,5689881,9458165,2696513,7088200,5690023,1294755,3327171,2600709,9751022,6188303,3278846,1323521,415714,9144606,5180751,6213899,357773,3197767,7032942,10840379,3884182,9102905,8756270,6620533,3559087,2084061,10560042,11303369,11244499,6811327,2857649,2691101,262874,5678532,8773855,11918084,6901191,11165833,1502816,7966049,1395730,1856849,11169390,6591878,1500710,209767,1394552,3437022,6325487,1245249,6318848,9182058,1264914,10821156,2460455,9481825,8620274,10306399,10004667,12582452,2536276,361224,3929469,10678644,6024954,8182868,12174949,9415476,3391027,5856122,10426977,11292351,498402,5965074,2109355,5567493,3265384,653853,9412421,4884675,2911864,4543124,7390923,11312785,6392704,13057812,5926111,7263362,12267623,13338771,3037339,12820829,9624753,309033,6375727,2115676,13876490,8603560,6035599,11259287,123758,522553,7708863,6605249,5794631,5791489,7680220,2550869,7094253,2955248,10926534,124898,10569571,5841702,8373954,6892524,6821186,10836780,2165615,11958654,8087976,5483409,11081564,2575154,6891210,11260959,6887103,12972150,10619903,10701970,6747012,10694578,5062696,7275535,11496536,5207995,10660098,5076227,79,6141933,8058577,2867845,1379295,6635053,5858953,5318687,5249628,13921490,1398479,8146767,10663075,15955037,15188709,6605563,2306996,8055157,9582430,5412258,18981907,1321837,1474879,5560807,6457928,5362992,2261444,2294072,1487956,901982,5402139,1253281,3364608,5737646,2424365,6799382,3087312,2297367,4876517,91825,4744575,1776031,6094645,3493294,7268991,5724273,6754782,9104148,6181983,7345076,7231525,1392761,4910588,1727650,3864372,2129516,6745431,5572522,1872856,1543939,5363177,8674393,489477,7584463,2993309,1720185,2713841,6482887,5826052,37,7360096,6380619,1602053,7307571,6297366,9260122,162171,2754823,6339504,45,8860093,6961276,467205,6744184,5556824,5576048,6425890,113055,1441162,5598804,5771851,6895108,5446044,6618070,8989166,947868,736205,7357221,6744560,8555145,9333466,5540464,5130172,1627986,9602168,5195102,9775301,8937718,18885,6088014,8818800,7945721,5689881,9458165,2696513,7088200,5690023,1294755,3327171,2600709,9751022,6188303,3278846,1323521,415714,9144606,5180751,6213899,357773,3197767,7032942,10840379,3884182,9102905,8756270,6620533,3559087,2084061,10560042,11303369,11244499,6811327,2857649,2691101,262874,5678532,8773855,11918084,6901191,11165833,1502816,7966049,1395730,1856849,11169390,6591878,1500710,209767,1394552,3437022,6325487,1245249,6318848,9182058,1264914,10821156,2460455,9481825,8620274,10306399,10004667,12582452,2536276,361224,3929469,10678644,6024954,8182868,12174949,9415476,3391027,5856122,10426977,11292351,498402,5965074,2109355,5567493,3265384,653853,9412421,4884675,2911864,4543124,7390923,11312785,6392704,13057812,5926111,7263362,12267623,13338771,3037339,12820829,9624753,309033,6375727,2115676,13876490,8603560,6035599,11259287,123758,522553,7708863,6605249,5794631,5791489,7680220,2550869,7094253,2955248,10926534,124898,10569571,5841702,8373954,6892524,6821186,10836780,2165615,11958654,8087976,5483409,11081564,2575154,6891210,11260959,6887103,12972150,10619903,10701970,6747012,10694578,5062696,7275535,11496536,5207995,10660098,5076227,79,6141933,8058577,2867845,1379295,6635053,5858953,5318687,5249628,13921490,1398479,8146767,10663075,15955037,15188709,6605563,2306996,8055157,9582430,5412258,18981907,1321837,1474879,5560807,6457928,5362992,2261444,2294072,1487956,901982,5402139,1253281,3364608,5737646,2424365,6799382,3087312,2297367,4876517,91825,4744575,1776031,6094645,3493294,7268991,5724273,6754782,9104148,6181983,7345076,7231525,1392761,4910588,1727650,3864372,2129516,6745431,5572522,1872856,1543939,5363177,8674393,489477,7584463,2993309,1720185,2713841,6482887,5826052,37,7360096,6380619,1602053,7307571,6297366,9260122,162171,2754823,6339504,45,8860093,6961276,467205,6744184,5556824,5576048,6425890,113055,1441162,5598804,5771851,6895108,5446044,6618070,8989166,947868,736205,7357221,6744560,8555145,9333466,5540464,5130172,1627986,9602168,5195102,9775301,8937718,18885,6088014,8818800,7945721,5689881,9458165,2696513,7088200,5690023,1294755,3327171,2600709,9751022,6188303,3278846,1323521,415714,9144606,5180751,6213899,357773,3197767,7032942,10840379,3884182,9102905,8756270,6620533,3559087,2084061,10560042,11303369,11244499,6811327,2857649,2691101,262874,5678532,8773855,11918084,6901191,11165833,1502816,7966049,1395730,1856849,11169390,6591878,1500710,209767,1394552,3437022,6325487,1245249,6318848,9182058,1264914,10821156,2460455,9481825,8620274,10306399,10004667,12582452,2536276,361224,3929469,10678644,6024954,8182868,12174949,9415476,3391027,5856122,10426977,11292351,498402,5965074,2109355,5567493,3265384,653853,9412421,4884675,2911864,4543124,7390923,11312785,6392704,13057812,5926111,7263362,12267623,13338771,3037339,12820829,9624753,309033,6375727,2115676,13876490,8603560,6035599,11259287,123758,522553,7708863,6605249,5794631,5791489,7680220,2550869,7094253,2955248,10926534,124898,10569571,5841702,8373954,6892524,6821186,10836780,2165615,11958654,8087976,5483409,11081564,2575154,6891210,11260959,6887103,12972150,10619903,10701970,6747012,10694578,5062696,7275535,11496536,5207995,10660098,5076227,79,6141933,8058577,2867845,1379295,6635053,5858953,5318687,5249628,13921490,1398479,8146767,10663075,15955037,15188709,6605563,2306996,8055157,9582430,5412258,18981907,1321837,1474879,5560807,6457928,5362992,2261444,2294072,1487956,901982,5402139,1253281,3364608,5737646,2424365,6799382,3087312,2297367,4876517,91825,4744575,1776031,6094645,3493294,7268991,5724273,6754782,9104148,6181983,7345076,7231525,1392761,4910588,1727650,3864372,2129516,6745431,5572522,1872856,1543939,5363177,8674393,489477,7584463,2993309,1720185,2713841,6482887,5826052,37,7360096,6380619,1602053,7307571,6297366,9260122,162171,2754823,6339504,45,8860093,6961276,467205,6744184,5556824,5576048,6425890,113055,1441162,5598804,5771851,6895108,5446044,6618070,8989166,947868,736205,7357221,6744560,8555145,9333466,5540464,5130172,1627986,9602168,5195102,9775301,8937718,18885,6088014,8818800,7945721,5689881,9458165,2696513,7088200,5690023,1294755,3327171,2600709,9751022,6188303,3278846,1323521,415714,9144606,5180751,6213899,357773,3197767,7032942,10840379,3884182,9102905,8756270,6620533,3559087,2084061,10560042,11303369,11244499,6811327,2857649,2691101,262874,5678532,8773855,11918084,6901191,11165833,1502816,7966049,1395730,1856849,11169390,6591878,1500710,209767,1394552,3437022,6325487,1245249,6318848,9182058,1264914,10821156,2460455,9481825,8620274,10306399,10004667,12582452,2536276,361224,3929469,10678644,6024954,8182868,12174949,9415476,3391027,5856122,10426977,11292351,498402,5965074,2109355,5567493,3265384,653853,9412421,4884675,2911864,4543124,7390923,11312785,6392704,13057812,5926111,7263362,12267623,13338771,3037339,12820829,9624753,309033,6375727,2115676,13876490,8603560,6035599,11259287,123758,522553,7708863,6605249,5794631,5791489,7680220,2550869,7094253,2955248,10926534,124898,10569571,5841702,8373954,6892524,6821186,10836780,2165615,11958654,8087976,5483409,11081564,2575154,6891210,11260959,6887103,12972150,10619903,10701970,6747012,10694578,5062696,7275535,11496536,5207995,10660098,5076227,79,6141933,8058577,2867845,1379295,6635053,5858953,5318687,5249628,13921490,1398479,8146767,10663075,15955037,15188709,6605563,2306996,8055157,9582430,5412258,18981907,1321837,1474879,5560807,6457928,5362992,2261444,2294072,1487956,901982,5402139,1253281,3364608,5737646,2424365,6799382,3087312,2297367,4876517,91825,4744575,1776031,6094645,3493294,7268991,5724273,6754782,9104148,6181983,7345076,7231525,1392761,4910588,1727650,3864372,2129516,6745431,5572522,1872856,1543939,5363177,8674393,489477,7584463,2993309,1720185,2713841,6482887,5826052,37,7360096,6380619,1602053,7307571,6297366,9260122,162171,2754823,6339504,45,8860093,6961276,467205,6744184,5556824,5576048,6425890,113055,1441162,5598804,5771851,6895108,5446044,6618070,8989166,947868,736205,7357221,6744560,8555145,9333466,5540464,5130172,1627986,9602168,5195102,9775301,8937718,18885,6088014,8818800,7945721,5689881,9458165,2696513,7088200,5690023,1294755,3327171,2600709,9751022,6188303,3278846,1323521,415714,9144606,5180751,6213899,357773,3197767,7032942,10840379,3884182,9102905,8756270,6620533,3559087,2084061,10560042,11303369,11244499,6811327,2857649,2691101,262874,5678532,8773855,11918084,6901191,11165833,1502816,7966049,1395730,1856849,11169390,6591878,1500710,209767,1394552,3437022,6325487,1245249,6318848,9182058,1264914,10821156,2460455,9481825,8620274,10306399,10004667,12582452,2536276,361224,3929469,10678644,6024954,8182868,12174949,9415476,3391027,5856122,10426977,11292351,498402,5965074,2109355,5567493,3265384,653853,9412421,4884675,2911864,4543124,7390923,11312785,6392704,13057812,5926111,7263362,12267623,13338771,3037339,12820829,9624753,309033,6375727,2115676,13876490,8603560,6035599,11259287,123758,522553,7708863,6605249,5794631,5791489,7680220,2550869,7094253,2955248,10926534,124898,10569571,5841702,8373954,6892524,6821186,10836780,2165615,11958654,8087976,5483409,11081564,2575154,6891210,11260959,6887103,12972150,10619903,10701970,6747012,10694578,5062696,7275535,11496536,5207995,10660098,5076227,79,6141933,8058577,2867845,1379295,6635053,5858953,5318687,5249628,13921490,1398479,8146767,10663075,15955037,15188709,6605563,2306996,8055157,9582430,5412258,18981907]";

//        for (int i=0;i<1000;i++) {
//            executorService.execute(() -> {
//                Set<Long> longSet = Stream.of(1321837L).collect(Collectors.toSet());
//                Long l = 1474879L;
//                Stopwatch stopwatch = Stopwatch.createStarted();
//                List<Long> list = JSON.parseArray(s, Long.class);
//                System.out.println(stopwatch.elapsed(TimeUnit.MILLISECONDS)+"-"+list.size());
//                list.removeAll(longSet);
//                System.out.println(stopwatch.elapsed(TimeUnit.MILLISECONDS)+"-"+list.size());
//                list.remove(l);
//                System.out.println(stopwatch.stop().elapsed(TimeUnit.MILLISECONDS)+"-"+list.size());
//            });
//        }

//        System.out.println("----");
//        Set<Long> longSet = Stream.of(1321837L).collect(Collectors.toSet());
//        Long l = 1474879L;
//        Stopwatch stopwatch = Stopwatch.createStarted();
//        List<Long> list = JSON.parseArray(s, Long.class);
//        System.out.println(stopwatch.elapsed(TimeUnit.MILLISECONDS)+"-"+list.size());
////        list.remove(longSet);
//        list.removeAll(longSet);
//        System.out.println(stopwatch.elapsed(TimeUnit.MILLISECONDS)+"-"+list.size());
//        list.remove(l);
//        System.out.println(stopwatch.stop()+"-"+list.size());


//        List<Long> list1 = Stream.of(1L,1L,2L,2L,3L,3L).collect(Collectors.toList());
//        System.out.println(list1);
//        Set<Long> set = Stream.of(1L).collect(Collectors.toSet());
//        list1.removeAll(set);
//        System.out.println(list1);
//        list1.remove(2L);
//        System.out.println(list1);
//        long videoId = 9036408L;
//        int index = Math.abs(Hashing.murmur3_32().hashLong(videoId).asInt()) % 1000;
//        System.out.println(index);

        get();
    }


    public static String get(){
        int baseSize=100;
        AtomicLong atomicLong = new AtomicLong(0);
        Set<String> multiTitles = new HashSet<>();
        multiTitles.add("t1");
        multiTitles.add("t2");
        multiTitles.add("t3");
        List<String> multiTitleBaseSource = new ArrayList<>();
        multiTitleBaseSource = new ArrayList<>(baseSize);
        for (int i = 0; i < baseSize; i++) {
            multiTitleBaseSource.add(String.valueOf(i));
        }
        // 打乱集合顺序
        Collections.shuffle(multiTitleBaseSource);

        int a = 0;
        int b=0;
        int c=0;
        for (int i=0;i<30;i++) {
            // size = 3（多标题个数不能大于 100）
            int size = multiTitles.size();
            // incr = 1154
            Long incr = atomicLong.incrementAndGet();
            // random = 99 <- (0-99)[1154 % 100]
            String random = multiTitleBaseSource.get((int) (incr % baseSize));
            // range = 33 <- 100 / 3
            int range = baseSize / size;
            // idx = 3 <- 99 / 33
            int idx = Integer.parseInt(random) / range;
            // idx = 2 <- 3 >= 3
            idx = idx >= size ? size - 1 : idx;

            String s = new ArrayList<>(multiTitles).get(idx);
            if (Objects.equals(s,"t1")) {
                a++;
            } else  if (Objects.equals(s,"t2")) {
                b++;
            } else if (Objects.equals(s,"t3")){
                c++;
            }
        }
        System.out.println(a);
        System.out.println(b);
        System.out.println(c);
        return "";
    }


    static class VideoView{
        Integer id;
        public VideoView (Integer id) {
            this.id = id;
        }
    }
}
